// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// кэш для шаблонов
var templateCache = map[string][]byte{}

func bindataRead(data []byte, name string) ([]byte, error) {
	return data, nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xcd\x6e\xdb\x30\x10\x84\xcf\xe5\x53\x2c\x10\xf4\x12\x94\x8e\xed\x1a\x69\x21\x9d\xd2\x9f\xbc\x46\xc1\x9f\x95\x44\x68\xc5\x15\xd6\x54\xa5\x40\xf0\xbb\x17\x94\xe5\xaa\x40\xeb\x5e\xe7\x9b\x19\x2e\x86\x96\xfd\x1b\xcc\x0a\x00\x80\x42\x44\xdd\x60\xa8\x9b\x54\xc0\x61\xf7\x8c\x5d\x09\x4f\x8f\x50\x85\x09\x2a\x16\x48\x8d\x09\x50\x71\x4c\x8f\x4f\xea\xa2\x94\x6a\x52\x47\x1f\xe0\x8f\xfc\xef\xe8\x7e\xff\xbe\xcc\x96\x9d\xe3\x98\x4c\x88\x28\xba\xa2\x21\xf8\x59\xbd\xeb\x42\xd4\x7f\xfb\x7a\x13\x91\xf4\xad\xea\xc6\x3f\x1e\xf7\xfd\x54\x42\x76\x14\x85\x1e\xd1\xb6\x21\xe9\xb3\x13\x26\xb2\x46\xd6\x47\xc7\xe0\x53\x53\xc0\xe1\xd8\x4f\xb9\xeb\x1f\x46\x9d\xc4\xb8\x76\xb5\x5b\xe3\xda\x5a\x78\x88\x5e\x3b\x26\x96\x02\x1e\xbe\xbe\x7c\x3f\xbd\xbe\x94\x57\xcc\xe2\x51\x34\x61\x95\xef\xeb\x27\x38\x33\x05\x0f\x0f\xce\xb9\xbb\xed\xcd\xd0\xd9\xfb\xed\xa7\xe3\x67\xeb\xcc\x7f\xc3\x45\xc3\x3f\x51\xee\x57\x1c\xbe\x7d\x3a\x7d\x79\x5d\x96\x52\xbd\x60\xf6\xad\x13\x1d\x9e\xf3\x42\x0a\x20\x17\x54\xc4\x63\x61\x86\xc4\x59\xb8\xce\xb2\x2d\x7c\x46\x42\x97\xd0\xff\x10\x1e\x61\x5e\xbe\x51\x8f\xeb\xce\x96\xc9\x97\x17\xb5\x3b\x27\x09\xb1\x86\x19\xd6\x87\x6b\x41\x8c\x25\x5c\xd4\x2e\x0e\x9d\xcd\x17\xde\x88\x37\xd2\xb2\x98\x58\xe3\x82\x2d\x33\xa1\x89\x1b\xb7\x34\xe0\x1a\x24\xda\xe4\xce\xd4\x18\x93\x59\x48\x8b\x6f\x1b\x10\xf4\x59\xfc\x15\x00\x00\xff\xff\x43\xd7\x46\xd6\x8c\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 652, mode: os.FileMode(420), modTime: time.Unix(1482667673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x6d\x53\xe3\x38\x12\xfe\x9c\xfc\x8a\x5e\xdd\x5d\x15\x53\x73\x8e\x09\x59\x66\x58\xb0\x53\xc5\x40\x76\xe7\xa8\x30\x64\x26\x1c\xdc\xee\x37\xd9\x6e\xdb\x4a\x64\xc9\x48\x72\x5e\xe6\x6a\xff\xfb\x95\xfc\x92\x18\x08\x0c\x6c\xcd\x55\xed\xf2\x21\x96\xad\xee\xe7\xe9\x57\xb5\x0a\xef\x87\xf3\xab\xb3\xeb\x5f\x27\x23\xf8\x78\x7d\x39\x1e\x76\xbd\xd4\x64\xdc\x3e\x90\x46\xc3\x6e\xc7\xcb\xd0\x50\x48\x8d\xc9\x1d\xbc\x2b\xd8\xc2\x27\x67\x52\x18\x14\xc6\xb9\x5e\xe7\x48\x20\xac\xde\x7c\x62\x70\x65\x5c\xab\x7b\x02\x61\x4a\x95\x46\xe3\xff\xfb\xfa\x67\xe7\x88\x80\x6b\x61\x0c\x33\x1c\x87\x1f\xaf\xaf\x27\x70\x3a\xf9\x17\x5c\xca\x70\x0e\x67\x52\x68\xc9\xd1\x73\xab\xcd\x6e\xb7\xe3\xe9\x50\xb1\xdc\x80\x56\xa1\x4f\x5c\x37\x94\x11\xf6\x66\x77\x05\xaa\x75\x2f\x94\x99\x5b\x2d\x9d\x7e\xaf\x7f\xd0\xdb\xef\x65\x4c\xf4\x66\x9a\x0c\x3d\xb7\xd2\x1a\xbe\x54\x3f\x63\x89\xa2\x06\x9d\x7e\xef\xa0\xd7\xdf\x01\xd3\xed\x78\x3f\x38\x0e\x8c\xa9\x41\x6d\x20\x94\x59\xce\x38\x46\x40\x45\x04\x19\x13\x2c\x66\x18\xc1\xd9\x74\x0a\x8e\x63\x29\x39\x13\x73\x50\xc8\x7d\xa2\xcd\x9a\xa3\x4e\x11\x0d\x81\x54\x61\xec\x13\x1b\x37\x7d\xec\xba\x19\x5d\x85\x91\xe8\x05\x52\x1a\x6d\x14\xcd\xed\x8b\x35\x68\xf3\xc1\x1d\xf4\x06\xbd\x77\x6e\xa8\xf5\xf6\x5b\x69\x59\xa8\x35\x01\x26\x0c\x26\x8a\x99\xb5\x4f\x74\x4a\x07\x47\x3f\x3a\xfd\xbb\xa3\xec\xfa\xe2\xea\x74\xba\x3a\x9a\xf5\x4f\x8b\xb7\xf4\xf0\xf6\xfc\x46\x4c\xd8\x01\x9f\xff\x1c\x2f\x97\xa3\x53\x7a\x94\x9e\x9f\x47\xb3\xdf\x78\x3e\xc6\x64\x95\xce\x6e\x2e\x47\xfd\x38\x99\xdd\x4e\x7e\xc9\xe6\x5f\xf5\x7b\x02\xa1\x92\x5a\x4b\xc5\x12\x26\x7c\x42\x85\x14\xeb\x4c\x16\x9a\x6c\xbc\xbf\xca\x0d\x93\x82\x72\x30\x29\x66\xf8\xff\xf6\xd5\x29\x59\x9e\xf3\x38\x1e\xdf\x1e\x7c\xda\xef\xf3\xcb\xbb\x19\x9d\x7f\x98\xaf\x06\xdc\xbd\xfc\x69\x44\xd3\x62\x99\x4f\x63\xfc\xb4\xb8\x79\x37\xb8\x38\xc4\xaf\x62\x50\xfc\xf6\x95\xe6\xd7\xfb\xc5\xfb\xd1\xaf\xfa\x3f\x97\xb3\xcf\x37\x6f\xf7\x47\xe2\x50\x7d\xdb\xe3\x67\xf3\x7d\x41\x17\x74\x5a\x15\x57\x15\x8a\x76\xa5\xbd\xd6\xf5\xd9\xc3\x2c\xcf\x76\xba\xbc\x9f\x4d\x83\x8b\xf3\xd1\x47\x46\x79\x9c\x15\x1f\x3e\x7c\x9e\xbc\x3b\xfd\xf1\xb3\xca\xd5\xdd\xe1\xd5\x4d\x7c\x3b\x78\x3f\xf9\xf2\x65\x30\x3b\x1c\x8d\xef\x56\x5a\xf7\xd7\x37\x77\x57\x46\x60\x2e\x3e\xde\x4c\x7e\xa2\x17\xef\x57\xd3\xa7\x5d\xbe\x57\xeb\xb5\x27\x66\x9d\x63\xdd\xc6\x5b\x67\x49\xe5\xe0\x4c\xd7\x0a\x8f\x3b\x65\x77\x49\xb4\xc0\xca\x7c\x56\x25\x62\x53\x5e\x4a\x95\x49\xde\x9c\x2e\x82\x66\xe8\x93\x05\xc3\x65\x2e\x95\x69\x9d\x29\x4b\x16\x99\xd4\x8f\x70\xc1\x42\x74\xca\x97\x7f\x02\x13\xcc\x30\xca\x1d\x1d\x52\x8e\x7e\xdf\xa2\x7c\xc3\x85\x61\xb7\xf3\xf7\x3d\x88\x64\x58\x64\x28\x0c\xbc\xe9\x29\xa4\xd1\x7a\x2f\x2e\x44\x68\x4b\x7c\xef\x0d\xfc\xb7\xdb\xe9\x00\x2c\xa8\x82\xa5\x06\x1f\x04\x2e\xe1\x16\x83\xa9\x0c\xe7\x68\xf6\xc8\xd2\xa6\x96\xc0\x5b\xe0\x32\xa4\x56\xa3\x97\x4a\x6d\xe0\x2d\x10\x17\xc3\x54\x92\x37\x27\xa5\xfa\x52\xf7\xa4\xc8\x50\x6b\x9a\x20\xf8\xb0\x81\xc7\x06\xbf\xa6\xd8\x8a\x5c\x4c\xaf\x3e\xf5\x72\x7b\x56\xee\xe1\x02\x85\xe9\x45\xd4\xd0\x1a\xad\x03\xc0\x65\xf2\x05\xef\x0a\xd4\x66\xaf\xd6\x79\x73\x62\xb7\xec\x5f\x29\xf3\xfb\x49\xb7\xdb\xe9\x74\xfe\x80\xdd\x5c\x26\x2f\x34\xbb\xc6\x7f\xb1\xd1\x4b\xc5\x0c\x8e\x65\xf2\xb4\xc9\x9d\xdf\x4b\xe9\x6d\x11\x79\x6e\x35\x6b\xba\x5d\x2f\x90\xd1\x7a\x58\xb7\xe3\xd4\xd0\x70\x6e\x4f\x1f\x08\x25\x2f\x32\xa1\x41\x0a\xc8\x64\xc0\x38\x42\xb0\x86\x8c\xce\x99\x48\x40\x0a\x84\xb8\xe0\xbc\x2a\x8f\xb2\x67\xad\x8a\x34\x29\x2a\x48\x29\x8f\xeb\x8d\xaa\x69\x23\xb6\x80\x90\x53\xad\x7d\x62\x8b\x8c\x32\x81\xca\x89\x79\xc1\xa2\xa6\xe8\x08\x94\x05\xea\x93\x9c\x46\x11\x13\xc9\x31\xf4\x0f\xf3\xd5\x49\x55\x66\x2d\x75\x25\x97\xe5\xb7\x07\x98\xdc\xc9\x22\xa7\x7f\x60\x4d\x76\x78\x52\xad\xca\x21\x57\x09\xdf\x93\xce\xa9\x40\x0e\xe5\xaf\x93\x2b\x96\x51\xb5\x26\x50\x89\x3d\x96\x73\x6c\x8c\x98\x48\x6a\x9c\x4e\xc7\x4b\x07\xf7\x05\xca\x21\x4a\x9e\x1a\xb1\xe9\xa0\x41\x76\x23\xb6\x78\x92\xc5\x26\x80\x00\x8b\x7c\x12\xb1\xc5\x2f\x4a\x16\x79\x8d\xb0\x89\x8b\x5c\xa0\x8a\xb9\x5c\x1e\xd3\xc2\xc8\x8d\x35\xf5\xa3\xe3\x15\xbc\x01\xe4\x4c\x1b\x27\xb1\x10\x15\x60\xd2\x46\x6b\xf4\x5a\x9a\x6e\xc1\xef\xa3\x3d\x6f\x69\x2c\xa5\x41\xb5\x0d\x07\xa7\x01\xf2\x07\xc9\x73\x8c\xcc\x8f\xa1\xff\x8f\x93\x2d\x9f\xc7\x44\x5e\x34\x27\x45\x98\x62\x38\x0f\xe4\xaa\x32\x30\x4c\xe7\xa7\x85\x91\xd3\x50\x49\xce\x09\x94\x9b\x18\xf9\xc4\xa8\x02\x09\x0c\xc1\x6e\x82\x2e\x77\x1b\x52\xb7\x64\xdd\xd8\x10\x14\xc6\x48\x51\x83\x57\x2f\xa4\xb1\x3a\x30\x02\x02\x23\xb6\x99\x36\x34\x60\x22\xc2\x95\x4f\xf6\x2b\xfe\xc0\x88\x33\x8e\x54\x3d\x8c\x78\xcc\x25\x35\xc7\x8a\x25\xa9\xd9\x3a\xe2\xe9\x9c\x8a\x06\x3b\xe1\xeb\x3c\x65\xa1\x14\xb0\x59\x39\x0a\x33\xb9\x40\x47\xb3\x44\x94\x27\x76\x4e\xc5\x10\x4a\xfc\x6d\x51\x54\x26\x3e\x2e\x8c\xed\xb2\x5a\x75\xba\xad\x6f\xdf\xec\x02\xca\x51\x19\x28\x7f\x1d\x26\x62\xb9\x71\x24\x62\x3a\xe7\x74\x7d\x2c\xa4\xc0\xca\xe5\x52\xe8\x12\xb5\x46\x91\x20\x19\xde\x22\x0f\x65\x86\xbd\x2d\xd7\x53\xa4\xf0\xa2\xde\xd3\x86\x9a\x72\xc2\xbf\xa4\xf5\xbe\x4f\xe7\x9d\xa3\xa1\x8c\xeb\xd7\x35\xdc\xb0\xdb\x40\xdb\x7d\x1b\x18\xc3\x14\x86\x34\x7f\x22\x74\x3b\x02\xad\x8b\x30\x44\x3b\x69\x1b\x2b\x01\x3c\x6d\x94\x14\xc9\xb0\x2a\x95\x0a\xb5\x89\x08\xd4\x15\xe1\xb9\xb5\x10\xb4\xa5\x54\x35\x76\xb6\x62\x9b\x7a\xdf\xba\xd2\x34\x6e\xab\xe3\x05\x5d\x80\xa0\x0b\xc7\xd0\x40\x93\x96\x1d\x9c\x6d\x2c\x0e\x0d\x5b\xd8\x66\xf2\x68\x7d\x25\xf8\x9b\xa1\x41\x43\x07\x76\x94\x38\x46\x26\x89\x75\xd9\xd0\x80\x0c\xeb\x01\xe8\xb9\x74\xe8\xb9\x9c\xdd\x03\x7d\x08\xa2\x73\x29\x34\xee\x46\xa9\xf6\x1e\xc2\x74\x1e\xa1\xe4\xa8\x34\xdb\x6d\xca\xa4\xda\x7a\x81\x29\x76\xba\xee\x00\x18\xcb\xe4\xa1\x72\x75\xe8\xdd\xcb\x7e\x1d\x29\x43\x03\xa7\x19\x49\x2d\xaa\x4d\x7d\xb4\xa2\xd6\xd2\xb0\x35\x05\x31\x8d\x10\x98\x80\x3a\xd8\x5b\x6d\x00\x2f\x57\x58\xea\xa7\xd1\x26\xc7\x9e\x9b\x2b\x6c\x51\xb4\x73\xfc\x90\xb1\x09\xf1\x2e\xca\xa7\x89\x6a\xad\x67\x99\x3a\x6d\xa2\x4d\x16\x5e\xc3\xd3\x28\xed\xa4\x81\xdd\x1e\x95\x99\x7a\x0d\x89\x55\x78\x9e\x60\x47\x8f\xd4\x9f\x76\x1e\xad\xdd\xee\xbd\xd5\x5f\xe1\x86\x31\x5a\x61\x58\xd8\x3b\x22\x8c\x65\xf2\xca\x93\xee\xde\xd5\x62\x6c\xa3\xff\x5d\xae\x15\x16\xe9\x4f\x7a\xa5\x18\xcb\xe4\x4f\x71\xab\x68\x07\xfb\xbb\xdf\x28\xca\xa3\xed\x8f\xdc\x26\x9a\xd2\xef\x76\x3d\xb7\xba\xfc\x7b\x6e\xf5\x0f\xa8\xff\x05\x00\x00\xff\xff\xa4\x7b\x35\x18\x98\x12\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 4760, mode: os.FileMode(420), modTime: time.Unix(1482669091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5f\x73\xdb\x36\x12\x7f\xd7\xa7\xc0\xe0\x3c\x26\x19\x59\xb4\x72\xe3\x7b\x38\xc9\xb2\x2f\xe7\xb4\x4d\x3a\x4e\x33\x13\xe7\xa5\x95\x94\x0e\x4c\xac\x28\xd4\x10\xa0\x00\x60\x14\x27\xca\x77\xef\x80\x20\x45\x10\x94\x14\xb7\xd3\x97\xc4\xc2\xfe\x7e\xfb\x1f\xbb\xe0\x27\xa2\x50\x26\x0b\x61\xd0\x04\x0d\xc7\x3d\xfb\x53\xc1\xc7\x02\xb4\xd1\x68\x82\xa6\xf3\x71\xaf\x77\x12\x53\x99\x15\x2b\x10\x26\x49\x15\x10\xfa\x18\x2f\x0a\x91\x19\x26\x45\x9c\xa0\xaf\x3d\x84\x10\x3a\x89\xf1\xbf\xee\x8d\xb8\xe1\x40\xd4\x8d\x14\x5a\x72\xc0\x49\x9a\x71\x96\x3d\x74\xc1\x35\x21\x57\xb2\x58\x37\x68\x58\xad\xcd\x63\x9c\x8c\x5b\x18\xc3\x14\x64\x64\x8d\x93\x74\xc9\x28\x84\xd2\x25\xad\x7c\xb5\x72\xb3\xe2\x31\xc6\x7b\x10\x7a\x2d\x85\x86\x23\x90\x35\x28\xcd\x8e\x2a\xe1\x32\xef\x48\xbf\x25\xe3\x5e\x27\xf8\xdb\x12\xf8\x94\xc0\x1d\xb2\x15\xb4\xd5\x58\x6a\xad\x99\x88\x89\x4c\x81\xcd\xfc\x8d\x2d\xd1\x4e\x91\x02\x53\x28\xe1\xea\xd6\xef\x8f\x7b\xdf\x3c\x8a\x5e\xca\xcd\x4b\x30\x84\x71\x1d\x33\x5a\x33\x34\x98\x77\x72\x73\x07\x1c\x32\x03\xd4\x0a\x9c\x49\x2e\xf3\x1a\x5c\x97\x7d\xca\xe8\x3c\x09\x74\x76\xd8\x4e\xed\x49\x8c\x53\xce\xb4\x19\x94\x11\x0d\x98\x81\x15\xb6\x3d\xb2\x92\x9f\xe0\x86\x13\xad\xe3\x48\x57\xa4\xdf\x95\xdc\x44\xce\xa8\x4d\x81\x92\x9b\x41\x65\x70\x80\xfb\x8c\x26\x29\xa1\xf4\x00\xc5\xf7\x24\x07\x73\x23\xb9\x54\xff\x7f\xbc\x33\xc4\x14\x3a\xd6\xe5\x7f\x37\x92\x82\xf5\xa9\x8c\x89\x2d\x90\x77\x8c\x26\x13\xf4\xef\xe1\x10\x6d\xb7\x28\x3c\x7c\xee\x17\xa6\xca\x29\xd6\x45\x96\x81\xd6\xb8\x2a\x09\x02\xae\x61\x8f\xca\x8b\xe1\xc5\x3e\x36\x25\x22\x07\xd5\x26\x77\x51\x1b\xa2\x04\x13\x79\x0d\x6b\x45\xe8\x55\xe4\x0f\x2d\x85\x7f\xc3\x9a\xcb\xb0\x20\x14\xde\x16\x26\x7e\x3e\x1c\xd6\x5d\xc8\x16\x25\x3e\xad\xfb\x3d\xad\xba\x1a\x28\x3a\x3d\x45\x07\x44\xa9\x20\xab\x32\x1c\x8c\x93\xc6\x4d\x0a\x1c\x0c\xb4\x39\x53\xbc\x23\xe1\x79\xed\x77\xcb\x70\x25\xdf\x59\xab\x7e\x7f\xdf\x44\x05\x9c\x62\x8b\x6c\x94\xef\xd1\x9d\x56\xb4\xc9\x04\x2d\x08\xd7\xf0\x3d\x85\xee\xf0\xb8\x4a\xb2\xfa\xb8\xee\xf8\x6c\x0f\xd3\x42\xf1\xa7\xf9\x6d\xd1\x41\x52\xbc\x39\x8a\x26\xe8\xe7\xbb\xb7\xbf\xa4\xda\x28\x26\x72\xb6\x78\xac\xeb\x54\x4a\xcf\x50\x21\x28\x2c\x98\x00\x7a\x86\x2e\xaa\x5b\xe9\xd8\x2e\xf1\x07\xe9\x4e\x7c\x90\x5f\x97\x63\x3f\xbd\x92\x76\xd8\x3b\x3a\x97\xf9\x61\xcb\x05\x3f\xec\xb7\xbb\x26\x68\x12\xb4\x5c\x73\x7b\xc6\x7b\xfa\x99\x18\xa3\xe2\x28\xb3\xf7\x3f\x3a\x43\x11\xe1\xa0\x0c\x2a\xff\x1d\x44\xa8\x7f\xe8\xd6\x27\xc9\x3e\x5d\xf6\x6e\xbc\x16\xd5\xd5\x68\xc4\x8e\x52\x4f\xf1\x4a\x41\x9b\xdf\x5a\x25\x7e\x91\xd2\x15\x98\xa5\xa4\xa8\x8f\x30\xc2\xa8\x8f\x5a\xb2\x35\x31\x4b\x4f\x51\x67\x27\xe9\x47\x61\xc8\xe7\x57\x2c\x5f\x72\x96\x2f\x4d\x3d\x67\x93\x80\xd3\xde\x52\x5d\x92\x93\xb7\x59\xc1\xe2\x0a\x49\x95\xb8\xcd\xf1\x56\x59\x88\xe7\x32\x4f\xdc\xbc\x6d\x8d\xa3\x77\xce\xe1\xd6\x38\xfa\x0b\x95\xb6\x50\x46\xd1\xa4\xb3\xcc\x1a\x31\x25\x06\x0c\xb3\x63\xa2\x2c\x75\xa1\x14\x08\xf3\x9e\xad\xc0\x07\x2d\x0a\xce\x6f\xcb\xae\xdc\xc1\x6d\x3d\x2e\x07\xdd\x92\x7c\xaf\x5c\xe3\x6a\x8b\x36\x0b\xaf\x8a\xa2\x49\x54\xf0\x38\x21\xeb\x35\x08\x1a\x47\x97\x9c\x21\x46\x27\xd8\xdf\x5f\xb6\x43\x99\xb5\x16\x61\x54\xb6\xf0\x04\x07\x4b\x11\x05\xbf\x8f\x36\xb5\x53\x24\x45\xf9\x88\x98\x60\x7f\x9f\x37\x96\x92\x71\xb5\x4b\xca\x39\x88\xaf\xac\xa4\x4e\x50\x1f\x45\x97\xe7\x9c\x5d\x55\xeb\x36\x7c\x11\x94\x67\x99\x7d\xac\xbc\xe5\xf4\x56\xe6\xba\x4e\xb2\xce\x94\xe4\xbc\x8a\xf9\xa5\xdc\x88\x38\x58\xbe\x1b\xc5\x0c\xdc\xca\x3c\x36\xf0\xd9\xf8\x9d\xf0\x0f\xd4\xcf\xaa\x0c\xb2\xef\x5e\x48\x7e\xe6\xf7\x67\xf7\x78\xf4\x87\x23\xb5\x27\x5e\x98\x4d\x9c\x6d\x8a\x17\x27\x97\xf9\x6b\x03\xab\x3b\xf6\xc5\x86\x1a\xb6\x09\xe2\x0c\x27\xa9\x66\x5f\x76\x61\xdb\x67\x83\xcf\xb9\x42\xff\x19\xb6\x1f\x83\x51\xa8\x61\xb4\x60\x4a\x9b\xa8\x7e\x45\xed\x9e\x86\xed\xf7\x58\xb7\x52\x95\x56\x6b\xd1\xfa\x95\x2d\x1f\x5e\x14\x46\xde\x95\x40\x9c\xa4\x4c\xc7\xd1\x28\x5b\x42\xf6\x00\x34\x4a\xc2\x07\x29\x65\x9f\x7e\x6a\xf7\xbb\xb3\xf0\x5e\xae\xe3\xfd\xf2\x1c\x4c\x3c\xac\x61\xaf\xc0\x8e\x8f\x23\x9e\x36\x99\xee\xba\x79\x2b\xf3\xbf\xe1\xa9\xeb\x8d\xfd\x5e\x3a\xd9\x53\x3d\x0c\x1b\xd6\x2b\x77\xe6\xce\x6d\xbb\xa2\x09\x12\xb0\x41\x2f\x89\x81\x03\x83\xcb\x03\x5b\xdb\x0e\x69\x3b\xfc\x1c\xa3\xfe\x2e\x86\x38\x80\xbd\x91\xc2\x2c\x4b\xdc\xf3\x2e\x38\xc0\xfe\x58\x70\xfe\x2b\x10\xe5\xd4\xa2\xff\xa1\x23\xd8\x57\xb2\x50\xda\x01\x47\x47\x60\x6f\x98\x28\x0c\x3c\x01\x78\x07\x99\x14\x74\x77\x81\xaa\xe1\x53\x87\x1f\x7c\x2d\x04\x6b\xc5\xdf\x1b\xf6\xef\x66\x63\xac\x39\xc9\x20\x3e\x3f\x3d\xcf\xcf\x50\x74\x4a\x56\xeb\x71\xd9\xf8\xd5\xf1\xa5\x3b\xe6\xa6\x75\x7a\xe5\x4e\x73\x7b\xda\x72\xa6\xad\x33\xc6\xf1\x6c\x56\x4c\xc9\xe0\xcb\x8b\xc1\x6f\xc3\xc1\x7f\xe7\x5f\x2f\xbe\x6d\x67\xb3\xe9\x87\x62\xbe\x9d\x7e\x98\xcd\xf0\x3c\x79\x86\xe3\x99\x7e\x36\x4a\xae\xb7\xb3\xfb\xd8\xa8\x02\xb6\xe5\x30\xdd\x8a\x82\xf3\x64\x76\xbf\x1d\x5c\xcf\x68\x3f\xbe\x1e\xcd\xd2\x19\x7d\x96\x5c\xc7\xd7\xa3\x29\xfc\x30\x9f\xf6\x67\x83\xb9\x95\x24\xd7\x89\x75\x65\xf7\x95\xb7\x22\x26\x5b\xfa\xfd\x5a\xb6\x10\xb7\x0b\x32\x12\xc5\xea\x1e\x54\xd4\x7c\x56\xda\x0b\x70\xfe\x01\x9f\xa7\xc6\x6e\x56\x47\xf5\xb9\x3b\xcc\xe8\xe4\x28\xc6\x4d\xb8\xd2\xc6\x03\x3c\x7a\x06\xd0\xbe\xef\x8f\x80\xe1\x1e\x76\x21\xa9\x17\xd0\x4b\x37\x9a\xf4\x1c\x75\xa7\x52\x7c\x2f\x25\x07\x22\x3c\xcd\xbe\x2e\x9b\xdf\xa7\x68\xb1\x38\x5f\x45\xf8\x19\x15\x5d\xea\x35\x11\xf5\x52\xb0\x3b\xc0\x12\xed\xf6\x2c\x17\x42\xa9\xdb\xad\x03\x8b\xbb\x8a\xbc\x8f\xec\x3f\x03\x00\x00\xff\xff\x1b\x17\xc5\x73\xf6\x10\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 4342, mode: os.FileMode(420), modTime: time.Unix(1482667673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)

	if _, ok := templateCache[cannonicalName]; ok {
		return templateCache[cannonicalName], nil
	}

	data, err := ioutil.ReadFile(cannonicalName)

	if err != nil {
		return nil, err
	}

	templateCache[cannonicalName] = data

	return data, nil
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html":    tmplIndexHtml,
	"tmpl/js/script.js":  tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
